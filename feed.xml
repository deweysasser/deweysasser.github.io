<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://www.deweysasser.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.deweysasser.com/" rel="alternate" type="text/html" /><updated>2022-10-17T04:47:07-04:00</updated><id>https://www.deweysasser.com/feed.xml</id><title type="html">DeweySasser.com</title><subtitle>Software Engineering, Systems Engineering, and other geek pursuits</subtitle><author><name>Dewey Sasser</name></author><entry><title type="html">Second System Effect Impacts Traefik</title><link href="https://www.deweysasser.com/content/second-system-effect-impacts-traefik" rel="alternate" type="text/html" title="Second System Effect Impacts Traefik" /><published>2022-10-17T00:00:00-04:00</published><updated>2022-10-17T00:00:00-04:00</updated><id>https://www.deweysasser.com/content/second-system-effect-impacts-traefik</id><content type="html" xml:base="https://www.deweysasser.com/content/second-system-effect-impacts-traefik">&lt;p&gt;Ahhh, the &lt;a href=&quot;https://en.wikipedia.org/wiki/Second-system_effect&quot;&gt;Second System Effect&lt;/a&gt;,
a perennial project killer.&lt;/p&gt;

&lt;p&gt;For some years, this site has run in a Kubernetes cluster with several others, and
used &lt;a href=&quot;https://traefik.io/traefik/&quot;&gt;Traefik Proxy&lt;/a&gt;, which has been an excellent piece of code, to
multiplex sites through one load balancer.&lt;/p&gt;

&lt;p&gt;For better or worse, my provider has just forced a kubernetes upgrade…which removed some
deprecated APIs…on which traefik 1.7 depended.&lt;/p&gt;

&lt;p&gt;And, instead of maintaining the same standard API of reading annotations from standard Ingress
objects, traefik has gone the “custom resource definition” route, destroying the simple and
elegant (and standard!) way of using it in favor of complicated and proprietary ways of specifying everything.&lt;/p&gt;

&lt;p&gt;I will update this page later with some details, but for now, the result is that TLS on this (and
several other) sites are broken until I can either reconfigure everything to use their new system,
or replace them with other methods.&lt;/p&gt;

&lt;p&gt;I apologize for the inconvenience. TLS is very useful, and right now we don’t have it. Gagh!&lt;/p&gt;</content><author><name>Dewey Sasser</name></author><category term="admin" /><summary type="html">Traefik has changed everything, breaking TLS for this site. I'm not a fan of the redesign.</summary></entry><entry><title type="html">Principles Of Design</title><link href="https://www.deweysasser.com/content/principles-of-design" rel="alternate" type="text/html" title="Principles Of Design" /><published>2021-05-01T00:00:00-04:00</published><updated>2021-05-01T00:00:00-04:00</updated><id>https://www.deweysasser.com/content/principles-of-design</id><content type="html" xml:base="https://www.deweysasser.com/content/principles-of-design">&lt;h1 id=&quot;principles-of-design&quot;&gt;Principles of Design&lt;/h1&gt;

&lt;p&gt;Some random thoughts on designing systems&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;put the processing where the knowledge is, don’t move the knowledge to the processing&lt;/li&gt;
  &lt;li&gt;Where there’s 2, there’s N&lt;/li&gt;
  &lt;li&gt;Be more general&lt;/li&gt;
  &lt;li&gt;keep it in the problem space as long as possible&lt;/li&gt;
  &lt;li&gt;Sufficiently detailed documentation is executable&lt;/li&gt;
  &lt;li&gt;DRY is good
*&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(more will be added, along with explanations)&lt;/p&gt;</content><author><name>Dewey Sasser</name></author><summary type="html">A list of my pithy statements about designing systems. Eventually I'll write explanations here.</summary></entry><entry><title type="html">Runbook Framework</title><link href="https://www.deweysasser.com/content/runbook-framework" rel="alternate" type="text/html" title="Runbook Framework" /><published>2021-05-01T00:00:00-04:00</published><updated>2021-05-01T00:00:00-04:00</updated><id>https://www.deweysasser.com/content/runbook-framework</id><content type="html" xml:base="https://www.deweysasser.com/content/runbook-framework">&lt;p&gt;&lt;a href=&quot;https://github.com/deweysasser/runbook-framework&quot;&gt;See Github Project&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;runbook-framework&quot;&gt;Runbook-framework&lt;/h1&gt;

&lt;p&gt;“Any sufficiently detailed documentation is executable”
– me&lt;/p&gt;

&lt;h2 id=&quot;what-is-it&quot;&gt;What is it?&lt;/h2&gt;

&lt;p&gt;A shell (bash) framework to implement runbook scripts that help move from fully manual to fully
automated processes.&lt;/p&gt;

&lt;p&gt;Based on the clever concept of
a &lt;a href=&quot;https://blog.danslimmon.com/2019/07/15/do-nothing-scripting-the-key-to-gradual-automation/&quot;&gt;Do Nothing Script&lt;/a&gt;,
provide some structure for the script which allows &amp;amp; encourages documentation and useful tracking at run time.&lt;/p&gt;

&lt;p&gt;You write this code:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;runbook&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  step &lt;span class=&quot;s2&quot;&gt;&quot;Step One&quot;&lt;/span&gt;
  step &lt;span class=&quot;s2&quot;&gt;&quot;Step Two, on &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$env&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;set &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$env&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$version&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  step &lt;span class=&quot;s2&quot;&gt;&quot;Wait for something to happen&quot;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sleep &lt;/span&gt;10
  step &lt;span class=&quot;s2&quot;&gt;&quot;Run a function&quot;&lt;/span&gt; run-function
  step &lt;span class=&quot;s2&quot;&gt;&quot;Last thing we can do automatically&quot;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Version is &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$version&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  step &lt;span class=&quot;s2&quot;&gt;&quot;bring it on home&quot;&lt;/span&gt;
  step &lt;span class=&quot;s2&quot;&gt;&quot;this one will fail&quot;&lt;/span&gt; fail_me
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And you can run it and get&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/deweysasser/runbook-framework/blob/master/docs/runbooks-screenshot.png?raw=true&quot; alt=&quot;runbook example&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Or if you just need to produce some documentation, you can get&lt;/p&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./example-runbook --version=1.2.3 -doc
1: Step One
2: Step Two, on staging
3: Wait for something to happen
4: Run a function
5: Last thing we can do automatically
6: bring it on home
7: this one will fail
$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;I love automation, but often getting something “automated” is a long process, and you actually need
to get something done now and don’t have the time to fully automate it.&lt;/p&gt;

&lt;p&gt;A few years ago I read
a &lt;a href=&quot;https://blog.danslimmon.com/2019/07/15/do-nothing-scripting-the-key-to-gradual-automation/&quot;&gt;blog post&lt;/a&gt;
presenting a clever way to move from unautomated to automated processes.&lt;/p&gt;

&lt;p&gt;The clever key:  start with a script that does nothing other than tell you what to do. A checklist.
Then, as time evolves, you can automate one little piece. Since the script is walking you through a
checklist, this becomes one step that’s done for you instead of you having to do it. This is one of
those simple and amazingly insightful ways of getting things done.&lt;/p&gt;

&lt;p&gt;This repository implements a small library of BASH functions to support runbooks in a consistent and
useful way.&lt;/p&gt;

&lt;h2 id=&quot;quickstart&quot;&gt;Quickstart&lt;/h2&gt;

&lt;p&gt;Be sure to read the &lt;a href=&quot;#important-details&quot;&gt;“important details”&lt;/a&gt; section.&lt;/p&gt;

&lt;h3 id=&quot;writing-the-script&quot;&gt;Writing the script&lt;/h3&gt;

&lt;p&gt;Create a script that looks like this:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;source &lt;/span&gt;runbook-framework.sh

parameters p1 p2
&lt;span class=&quot;nv&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;some default value&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Here's where you put your actual runbook steps&lt;/span&gt;
runbook&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  step &lt;span class=&quot;s2&quot;&gt;&quot;This is a manual step and you'll get a prompt&quot;&lt;/span&gt;
  step &lt;span class=&quot;s2&quot;&gt;&quot;This is an automated step&quot;&lt;/span&gt; some-command
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# This must be the last line in your file&lt;/span&gt;
main &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Of course, the steps should be doing whatever it is you need.  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;some-command&lt;/code&gt; can be a function you
define (I suggest later in the file, so the file starts with your runbook).&lt;/p&gt;

&lt;p&gt;If you leave out the command, you’ve just made a prompt. If you include the command, it will be
executed. The status of all commands will be printed as they are executed.&lt;/p&gt;

&lt;h3 id=&quot;running-the-script&quot;&gt;Running the script&lt;/h3&gt;

&lt;p&gt;The framework provides some overall features, including&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;-help or -h – show how to run this runbook, including the parameters&lt;/li&gt;
  &lt;li&gt;-doc – show the checklist &lt;em&gt;without&lt;/em&gt; executing it&lt;/li&gt;
  &lt;li&gt;-verbose or -v – show the output of each command as it happens&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-happened-to-the-output&quot;&gt;What happened to the output?&lt;/h3&gt;

&lt;p&gt;The output of each step is stored away and shown only on error or on request.&lt;/p&gt;

&lt;h3 id=&quot;important-details&quot;&gt;Important Details&lt;/h3&gt;

&lt;p&gt;The script sets up bash to be pretty paranoid, specifically:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ueo&lt;/span&gt; pipefail
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The short form is:  unexpanded variables will be an error, any error (that’s not in a conditional)
will stop the script, and it counts errors in the middle of a pipeline, not just the result of the
last command in the pipeline.&lt;/p&gt;

&lt;h2 id=&quot;passing-parameters&quot;&gt;Passing Parameters&lt;/h2&gt;

&lt;p&gt;You can set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parameters&lt;/code&gt; variable to a list of parameters you want to use in your script. They
will be set as (global) environment variables, exactly as you type them. All names that begin with
an underscore (‘_’) are reserved.&lt;/p&gt;

&lt;p&gt;When you call the script, you may pass these variables on the command line as command line options.
If any of them are unset, the script will stop. So, if you want a default value, make sure you set
it.&lt;/p&gt;

&lt;h2 id=&quot;examples&quot;&gt;Examples&lt;/h2&gt;

&lt;h3 id=&quot;just-try-to-run-it&quot;&gt;Just try to run it&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./example-runbook
Parameter &lt;span class=&quot;s1&quot;&gt;'version'&lt;/span&gt; required
Usage: ./example-runbook &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt;|-help] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-show&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;VALUE] &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;VALUE 
Defaults:
   &lt;span class=&quot;nb&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; staging
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;get-some-documentation-on-the-process&quot;&gt;Get some documentation on the process&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./example-runbook  &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1.2.3 &lt;span class=&quot;nt&quot;&gt;-doc&lt;/span&gt;
1: Step One
2: Step Two, on staging
3: Wait &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;something to happen
4: Run a &lt;span class=&quot;k&quot;&gt;function
&lt;/span&gt;5: Last thing we can &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;automatically
6: bring it on home
7: this one will fail
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;actually-run-the-runbook&quot;&gt;Actually run the runbook&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./example-runbook  &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1.2.3
 1: &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;00:52&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Step One...&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;press enter when &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;5 s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; DONE
 2: &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;00:52&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Step Two, on staging... &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0 s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; DONE
 3: &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;00:52&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Wait &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;something to happen... &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;10 s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; DONE
 4: &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;00:52&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Run a &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;... &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0 s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; DONE
 5: &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;00:52&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Last thing we can &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;automatically... &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0 s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; DONE
 6: &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;00:52&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; bring it on home...&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;press enter when &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;12 s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; DONE
 7: &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;00:53&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; this one will fail... &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0 s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; FAILED
    &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; it&lt;span class=&quot;s1&quot;&gt;'s time we stop
    &amp;gt;&amp;gt; Hey, what'&lt;/span&gt;s that sound
    &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; Everybody look, what&lt;span class=&quot;s1&quot;&gt;'s going down?
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;the-future&quot;&gt;The Future&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;the -doc argument should extract some documentation from the comment blocks and include it.&lt;/li&gt;
  &lt;li&gt;can we do some kind of time estimate and make that useful information? (&lt;a href=&quot;https://github.com/deweysasser/runbook-framework/discussions/9&quot;&gt;discussion here&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;documentation&quot;&gt;Documentation&lt;/h3&gt;

&lt;p&gt;I’d like to make a “generate a fairly complete markdown document describing the process” be a feature.  The question is how to do that without obscuring the actual logic.  See &lt;a href=&quot;https://github.com/deweysasser/runbook-framework/discussions/6&quot;&gt;the github discussion&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;managing-state&quot;&gt;Managing state&lt;/h3&gt;

&lt;p&gt;Would it be interesting to manage the current state of “a run”  in a persistent way, particularly so it could be resumed later if e.g. a step failed or something? (&lt;a href=&quot;https://github.com/deweysasser/runbook-framework/discussions/10&quot;&gt;discussion here&lt;/a&gt;)&lt;/p&gt;</content><author><name>Dewey Sasser</name></author><category term="shell" /><category term="sysadmin" /><category term="automation" /><summary type="html">A new a shell framework to construct manual and automated runbooks</summary></entry><entry><title type="html">2021 Site Refresh</title><link href="https://www.deweysasser.com/content/2021-site-refresh" rel="alternate" type="text/html" title="2021 Site Refresh" /><published>2021-04-25T00:00:00-04:00</published><updated>2021-04-25T00:00:00-04:00</updated><id>https://www.deweysasser.com/content/2021%20site%20refresh</id><content type="html" xml:base="https://www.deweysasser.com/content/2021-site-refresh">&lt;p&gt;It’s been a while since I set up the technology behind this site, and times have changed.&lt;/p&gt;

&lt;p&gt;So, I’m moving it form Drupal to something else.&lt;/p&gt;

&lt;p&gt;I’m trying out &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; to statically generate, and it’s pretty cool.&lt;/p&gt;

&lt;p&gt;I’m not sure if that’s the right long term solution or not. We’ll see. But, I
needed something now, and it’s something.&lt;/p&gt;

&lt;p&gt;If you have an option on what I should use (or, better yet, what features I should support), please
let me know.&lt;/p&gt;

&lt;p&gt;Some thoughts are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;discussions (could use disqus.com or commento.io)&lt;/li&gt;
  &lt;li&gt;a more wiki-like structure with nice cross-links (probably dokuwiki)&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Dewey Sasser</name></author><summary type="html">I've refreshed the site for 2021 using Jekyll</summary></entry><entry><title type="html">Markdown Toc</title><link href="https://www.deweysasser.com/content/markdown-toc" rel="alternate" type="text/html" title="Markdown Toc" /><published>2021-02-24T00:00:00-05:00</published><updated>2021-02-24T00:00:00-05:00</updated><id>https://www.deweysasser.com/content/markdown-toc</id><content type="html" xml:base="https://www.deweysasser.com/content/markdown-toc">&lt;p&gt;Introducing &lt;a href=&quot;https://github.com/deweysasser/markdown-doc&quot;&gt;Markdown Tables of Contents&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This project contains a script and makefile to maintain a table of contents in your markdown
documents, along with an optional git &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pre-commit&lt;/code&gt; hook to keep it up to date.&lt;/p&gt;

&lt;p&gt;I find it useful for either long documents or long READMEs for github projects.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Markdown-doc

Add tables of contents to all markdown files in this repo.

## Contents

* [Markdown-doc](#markdown-doc)
  * [Contents](#contents)
  * [Features](#features)
  * [Usage](#usage)
    * [Generate tables of contents](#generate-tables-of-contents)
    * [Bulk html generation](#bulk-html-generation)
  * [Author and Bug Reports](#author-and-bug-reports)
  * [Notes](#notes)
  * [TODO](#todo)

## Features

* Generate Tables of Contents
* bulk translate to HTML
* ...

## Usage

### Generate tables of contents
When run on a file with a section (any level) titled &quot;Contents&quot; (as above), the scripts here will enable you to automatically generate and insert a Table of Contents.

If no Contents section is found, the files will not be updated.

This also provides git hooks to update the ToC on commit (WARNING:  the way it does so will make `git add -p` pretty useless.  Feel free to modify the hook to better suit your needs if this 
one doesn't work for you.)

To (manually) update the table of contents for all markdown files in this directory, run

     make contents

(or just run `make`)

To set up the git hooks for this repository so that ToCs are updatted on commit, run.

     make hooks

### Bulk html generation

`make html`

all markdown files will be rendered into HTML using 'markdown' and placed in `generated/html`

## Author and Bug Reports

Please use GitHub issues for any bug reports or change requests

## Notes

The script uses `sed` and `awk` for maximum system compatability.  It was developed on MacOS, so it's expected to run anywhere with a `sed` and `awk` more recent than 1990 or so.

It's also about the gnarliest piece of `sed` that I ever want to write, and could be used as the example on a slide for &quot;why modern interpreted languages exist&quot;.

## TODO

* use pandoc to generate arbitrary formats
* use a static web site generator to generate a site?

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Dewey Sasser</name></author><category term="tools" /><category term="shell" /><summary type="html">Introducing Markdown Tables of Contents. This project contains a script and makefile to maintain a table of contents in your markdown documents, along with an optional git pre-commit hook to keep it up to date. I find it useful for either long documents or long READMEs for github projects. # Markdown-doc Add tables of contents to all markdown files in this repo. ## Contents * [Markdown-doc](#markdown-doc) * [Contents](#contents) * [Features](#features) * [Usage](#usage) * [Generate tables of contents](#generate-tables-of-contents) * [Bulk html generation](#bulk-html-generation) * [Author and Bug Reports](#author-and-bug-reports) * [Notes](#notes) * [TODO](#todo) ## Features * Generate Tables of Contents * bulk translate to HTML * ... ## Usage ### Generate tables of contents When run on a file with a section (any level) titled &quot;Contents&quot; (as above), the scripts here will enable you to automatically generate and insert a Table of Contents. If no Contents section is found, the files will not be updated. This also provides git hooks to update the ToC on commit (WARNING: the way it does so will make `git add -p` pretty useless. Feel free to modify the hook to better suit your needs if this one doesn't work for you.) To (manually) update the table of contents for all markdown files in this directory, run make contents (or just run `make`) To set up the git hooks for this repository so that ToCs are updatted on commit, run. make hooks ### Bulk html generation `make html` all markdown files will be rendered into HTML using 'markdown' and placed in `generated/html` ## Author and Bug Reports Please use GitHub issues for any bug reports or change requests ## Notes The script uses `sed` and `awk` for maximum system compatability. It was developed on MacOS, so it's expected to run anywhere with a `sed` and `awk` more recent than 1990 or so. It's also about the gnarliest piece of `sed` that I ever want to write, and could be used as the example on a slide for &quot;why modern interpreted languages exist&quot;. ## TODO * use pandoc to generate arbitrary formats * use a static web site generator to generate a site?</summary></entry><entry><title type="html">Gnarly Sed</title><link href="https://www.deweysasser.com/content/gnarly-sed" rel="alternate" type="text/html" title="Gnarly Sed" /><published>2021-02-21T00:00:00-05:00</published><updated>2021-02-21T00:00:00-05:00</updated><id>https://www.deweysasser.com/content/gnarly-sed</id><content type="html" xml:base="https://www.deweysasser.com/content/gnarly-sed">&lt;p&gt;Last night I wrote a script to compute a Table of Contents for Markdown documents and insert it into
the document. It handles both syntaxes for heading blocks.  (I also wrote a git hook to run this
script on commit.)&lt;/p&gt;

&lt;p&gt;It contains what is probably the most gnarly sed script I’ve ever written. I am &lt;em&gt;so&lt;/em&gt; glad we’ve
moved beyond sed.&lt;/p&gt;

&lt;p&gt;(However, sed is also everywhere without having to install other tools on almost any system, which
is why I used sed and awk instead of something more modern.)&lt;/p&gt;

&lt;p&gt;Anyway, for your reading pleasure (or torture), here it is:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/^#/ &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        s/^&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#*\) */\1|/&lt;/span&gt;
        p
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        /^--&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;/ &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        x
        s/^/##|/
        p
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        /^&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;/ &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        x
        s/^/#|/
        p
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        h
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Dewey Sasser</name></author><category term="sed" /><category term="shell" /><summary type="html">Last night I wrote a script to compute a Table of Contents for Markdown documents and insert it into the document. It handles both syntaxes for heading blocks. (I also wrote a git hook to run this script on commit.) It contains what is probably the most gnarly sed script I’ve ever written. I am so glad we’ve moved beyond sed. (However, sed is also everywhere without having to install other tools on almost any system, which is why I used sed and awk instead of something more modern.) Anyway, for your reading pleasure (or torture), here it is: /^#/ { s/^\(#*\) */\1|/ p } /^--*/ { x s/^/##|/ p } /^==*/ { x s/^/#|/ p } h</summary></entry><entry><title type="html">Computer Architect</title><link href="https://www.deweysasser.com/content/computer-architect" rel="alternate" type="text/html" title="Computer Architect" /><published>2021-02-03T00:00:00-05:00</published><updated>2021-02-03T00:00:00-05:00</updated><id>https://www.deweysasser.com/content/computer-architect</id><content type="html" xml:base="https://www.deweysasser.com/content/computer-architect">&lt;p&gt;Something that often surprises people about a Software Architect&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; role:  it’s a people job.&lt;/p&gt;

&lt;p&gt;Technical competence is table stakes.&lt;/p&gt;

&lt;p&gt;To actually play the game, it’s all about communication, advocacy, communication, evangelism, communication, persuasion, communication, relationships, and communication.&lt;/p&gt;

&lt;p&gt;There’s no point in designing the perfect cat tree if you can’t convince the cats to use it.
It’s really about herding cats.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;same can be said about my current “Cloud Systems Architect” role. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Dewey Sasser</name></author><summary type="html">Something that often surprises people about a Software Architect1 role: it’s a people job. Technical competence is table stakes. To actually play the game, it’s all about communication, advocacy, communication, evangelism, communication, persuasion, communication, relationships, and communication. There’s no point in designing the perfect cat tree if you can’t convince the cats to use it. It’s really about herding cats. same can be said about my current “Cloud Systems Architect” role. &amp;#8617;</summary></entry><entry><title type="html">Resetting a git-crypt system</title><link href="https://www.deweysasser.com/content/resetting-git-crypt-system" rel="alternate" type="text/html" title="Resetting a git-crypt system" /><published>2020-05-12T00:00:00-04:00</published><updated>2020-05-12T00:00:00-04:00</updated><id>https://www.deweysasser.com/content/resetting%20git-crypt%20system</id><content type="html" xml:base="https://www.deweysasser.com/content/resetting-git-crypt-system">&lt;h1 id=&quot;the-problem&quot;&gt;The Problem&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/AGWA/git-crypt&quot;&gt;git-crypt&lt;/a&gt; is pretty awesome, but I’ve managed to do enough evil things to bork 
the decryption keys.  Here’s how to fix it.&lt;/p&gt;

&lt;!--break--&gt;

&lt;h1 id=&quot;the-background&quot;&gt;The Background&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/AGWA/git-crypt&quot;&gt;git-crypt&lt;/a&gt; allows you to encrypt some of the files in a git repository.  It supports adding other users’ GPG keys so they will be able to encrypt/decrypt the file.  It’s pretty clever, and I like it.&lt;/p&gt;

&lt;p&gt;The basic operation is that it creates a single symmetric key (which it stores in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.git/git-crypt/keys/default&lt;/code&gt;), then
on request will use GPG to encrypt that key to the public key IDs you specify, and those are stored in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.git-crypt//keys/default/0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;However, if you do sufficiently evil things in git repos, like using &lt;a href=&quot;https://github.com/newren/git-filter-repo&quot;&gt;git filter-repo&lt;/a&gt; (another pretty awesome tool), it’s possible to drive &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git crypt&lt;/code&gt; into a pathological state where your keys are wrong and you can’t do anything.&lt;/p&gt;

&lt;p&gt;In order to recover from this situation, make sure you have unencrypted copies of the files around somewhere, then:&lt;/p&gt;

&lt;h1 id=&quot;the-fix&quot;&gt;The Fix&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;create a fresh clone of your repo.  In that clone, do…&lt;/li&gt;
  &lt;li&gt;save the IDs of all keys&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; .git-crypt/keys/default/0/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.gpg | xargs &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; 1 &lt;span class=&quot;nt&quot;&gt;-I&lt;/span&gt; F &lt;span class=&quot;nb&quot;&gt;basename &lt;/span&gt;F .gpg&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Remove the existing encrypted keys&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; .git-crypt
&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; .git/git-crypt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Reinitialize the encryption&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git crypt init&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Re-add the public keys which should access the encrypted files&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;k &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;git crypt add-gpg user &lt;span class=&quot;nv&quot;&gt;$k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;COPY in fresh, unencrypted copies of all previously encrypted files, however you do that&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(Optional) rebase so that all of this stuff occurs in a single commit&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git rebase &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; origin/master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Note that the VI magic to “fixup” all commits into the first one is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2,$ s/pick/fixup/&lt;/code&gt;&lt;/p&gt;</content><author><name>Dewey Sasser</name></author><category term="git" /><summary type="html">The Problem git-crypt is pretty awesome, but I’ve managed to do enough evil things to bork the decryption keys. Here’s how to fix it. The Background git-crypt allows you to encrypt some of the files in a git repository. It supports adding other users’ GPG keys so they will be able to encrypt/decrypt the file. It’s pretty clever, and I like it. The basic operation is that it creates a single symmetric key (which it stores in .git/git-crypt/keys/default), then on request will use GPG to encrypt that key to the public key IDs you specify, and those are stored in .git-crypt//keys/default/0. However, if you do sufficiently evil things in git repos, like using git filter-repo (another pretty awesome tool), it’s possible to drive git crypt into a pathological state where your keys are wrong and you can’t do anything. In order to recover from this situation, make sure you have unencrypted copies of the files around somewhere, then: The Fix create a fresh clone of your repo. In that clone, do… save the IDs of all keys keys=$(ls .git-crypt/keys/default/0/*.gpg | xargs -n 1 -I F basename F .gpg) Remove the existing encrypted keys git rm -r .git-crypt rm -rf .git/git-crypt Reinitialize the encryption git crypt init Re-add the public keys which should access the encrypted files for k in $keys; do git crypt add-gpg user $k; done COPY in fresh, unencrypted copies of all previously encrypted files, however you do that (Optional) rebase so that all of this stuff occurs in a single commit git rebase -i origin/master Note that the VI magic to “fixup” all commits into the first one is 2,$ s/pick/fixup/</summary></entry><entry><title type="html">The 2nd Crypto Wars</title><link href="https://www.deweysasser.com/content/2nd-crypto-wars" rel="alternate" type="text/html" title="The 2nd Crypto Wars" /><published>2019-08-15T00:00:00-04:00</published><updated>2019-08-15T00:00:00-04:00</updated><id>https://www.deweysasser.com/content/2nd%20crypto%20wars</id><content type="html" xml:base="https://www.deweysasser.com/content/2nd-crypto-wars">&lt;p&gt;This has been invisible to most people, but we’re now in what I call the “2nd Crypto Wars”. This is important, and your world will be impacted by it.&lt;/p&gt;

&lt;p&gt;The current battleground is that the Government wants the ability to see your banking communication, your chats, your Alexa snippets…  They won’t do that, of course.  They’ll only use it on the bad guys, they promise.  You should be happy that they can see everything because they’ll protect you from [insert boogie-man du jour].&lt;/p&gt;

&lt;p&gt;The occasional criminal who breaks the system and vacuums out a few bank accounts is a small price to pay for allowing the government to pursue terrorists, drug dealers, and child pornographers. (They always seem to use child porn as a boogie man.  After all, there’s no one who can stand up and defend it, not even Roy Moore.). Government abuse of this system is, of course, not something to worry about at all.&lt;/p&gt;

&lt;p&gt;After all, we’re talking about iPhones and nanny cams, not nuclear launch codes.&lt;/p&gt;

&lt;p&gt;The problem with this is that, actually, no — much the same technology secures it all, from your Facebook Messenger to political communications between legislators to military communications.  The DoD may buy $500 hammers, but they buy off-the-shelf communication equipment from Cisco, GE, etc. (because, frankly, that stuff is damn good and they can’t really do better with a bespoke system).  I use this technology daily to secure everything from political information to credit cards.  When something breaks in these systems, whole companies can fail and real people are out of jobs.&lt;/p&gt;

&lt;p&gt;The DoJ keeps has always maintained that we can put in a backdoor that only they can use, and only when their motivations and pure and just and on the side of right.&lt;/p&gt;

&lt;p&gt;A.G. Barr has recently shown a change in Government strategy, and that’s progress.  He’s given up on the delusion that you can have your cake while he eats it. His speech admitted some of the consequences (less security for you) instead of pretending they don’t exist, and he’s claiming it’s worth the cost to get the result (more security for you). So, we can now at least discuss things in the  world of reality instead of fantasy.&lt;/p&gt;

&lt;p&gt;Big Brother may be watching over you, but Big Brother can’t see everywhere.  One of the primary purposes of Government (in the modern world) is to provide security for its citizens, so this is a legitimate concern.  How much do you want him to and what does it cost you?  That’s now the discussion.&lt;/p&gt;

&lt;p&gt;For further reading, &lt;a href=&quot;https://en.wikipedia.org/wiki/Bruce_Schneier&quot;&gt;Bruce Schneier&lt;/a&gt; has his own &lt;a href=&quot;https://www.schneier.com/blog/archives/2019/08/attorney_genera.html&quot;&gt;take&lt;/a&gt;.&lt;/p&gt;</content><author><name>Dewey Sasser</name></author><category term="crypto" /><summary type="html">This has been invisible to most people, but we’re now in what I call the “2nd Crypto Wars”. This is important, and your world will be impacted by it. The current battleground is that the Government wants the ability to see your banking communication, your chats, your Alexa snippets… They won’t do that, of course. They’ll only use it on the bad guys, they promise. You should be happy that they can see everything because they’ll protect you from [insert boogie-man du jour]. The occasional criminal who breaks the system and vacuums out a few bank accounts is a small price to pay for allowing the government to pursue terrorists, drug dealers, and child pornographers. (They always seem to use child porn as a boogie man. After all, there’s no one who can stand up and defend it, not even Roy Moore.). Government abuse of this system is, of course, not something to worry about at all. After all, we’re talking about iPhones and nanny cams, not nuclear launch codes. The problem with this is that, actually, no — much the same technology secures it all, from your Facebook Messenger to political communications between legislators to military communications. The DoD may buy $500 hammers, but they buy off-the-shelf communication equipment from Cisco, GE, etc. (because, frankly, that stuff is damn good and they can’t really do better with a bespoke system). I use this technology daily to secure everything from political information to credit cards. When something breaks in these systems, whole companies can fail and real people are out of jobs. The DoJ keeps has always maintained that we can put in a backdoor that only they can use, and only when their motivations and pure and just and on the side of right. A.G. Barr has recently shown a change in Government strategy, and that’s progress. He’s given up on the delusion that you can have your cake while he eats it. His speech admitted some of the consequences (less security for you) instead of pretending they don’t exist, and he’s claiming it’s worth the cost to get the result (more security for you). So, we can now at least discuss things in the world of reality instead of fantasy. Big Brother may be watching over you, but Big Brother can’t see everywhere. One of the primary purposes of Government (in the modern world) is to provide security for its citizens, so this is a legitimate concern. How much do you want him to and what does it cost you? That’s now the discussion. For further reading, Bruce Schneier has his own take.</summary></entry><entry><title type="html">Staying Sane with IaC</title><link href="https://www.deweysasser.com/content/staying-sane-with-iac" rel="alternate" type="text/html" title="Staying Sane with IaC" /><published>2018-10-01T00:00:00-04:00</published><updated>2018-10-01T00:00:00-04:00</updated><id>https://www.deweysasser.com/content/staying%20sane%20with%20iac</id><content type="html" xml:base="https://www.deweysasser.com/content/staying-sane-with-iac">&lt;p&gt;Infrastructure as Code is all the rage, but suffers the same problems as any other code:  it can easily become an unmanageable plate of spaghetti.&lt;/p&gt;

&lt;p&gt;Organizing your IaC is critical but the methods are different than traditional program code.&lt;/p&gt;

&lt;p&gt;I present an organizational pattern for IaC that has proven itself across multiple technologies in multiple cloud systems to allow isolation of concerns, stability, and controlled rollouts and maintain your sanity while doing so.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.google.com/presentation/d/1jzpibs9zXzMdHQJ4mK6P7w7m2aRUMFtH6q67ncXKIw/edit?usp=sharing&quot;&gt;Slides for a presentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=LqAjwyxDeuc&quot;&gt;Video of the presentation&lt;/a&gt;&lt;/p&gt;</content><author><name>Dewey Sasser</name></author><category term="aws" /><summary type="html">Infrastructure as Code is all the rage, but suffers the same problems as any other code: it can easily become an unmanageable plate of spaghetti. Organizing your IaC is critical but the methods are different than traditional program code. I present an organizational pattern for IaC that has proven itself across multiple technologies in multiple cloud systems to allow isolation of concerns, stability, and controlled rollouts and maintain your sanity while doing so. Slides for a presentation Video of the presentation</summary></entry></feed>